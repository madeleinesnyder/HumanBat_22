function [SI_info] = HumanBat_SI_HumanPosition_fx(batdate,logger,unit,human_name)
% Function to examine the SI for each neuron given a map of the HUMAN MOVEMENT 
% (extrapolated from Nick's paper)

% Inputs:
    % unit: putative unit to examine SI of (i.e. 5)
    % batdate: date of session
    % logger: which logger data to examine
    % bin_size: the size of the bins to segment the room into (i.e. 20 (cm))
% Outputs:
    % Significance of spatial information for that unit
    % Heatmap of the unit and the shuffles

% MCS 6/22/22
% ============================================

exp_data_path = strcat('/home/madeleine/mnt/server2/users/KQMS/HumanBat/2992814650/processed/',num2str(batdate),'/');
addpath(genpath('/home/madeleine/Desktop/HumanSniffBat/HumanBat/ephys'));

load(strcat(exp_data_path,'ciholas/pruned_resorted_trimmed_ciholas_bat_final_flight_structure.mat'));
load(strcat(exp_data_path,'ciholas/aligned_bat_position_data.mat'));
load(strcat(exp_data_path,'ciholas/clustered_ciholas_flights.mat'));
load(strcat(exp_data_path,'ciholas/aligned_human_position_data.mat')); 
load(strcat(exp_data_path,'ephys/logger',num2str(logger),'/extracted_data/B_ephys_data_aligned.mat'))
close all;

%% 1. Calculate 3d rate maps for flying
bin_size = 20; % cm to section room into

% For human
if human_name == 'm'
    human = squeeze(human_r(:,:,4));
elseif human_name == 'k'
    human = squeeze(human_r(:,:,3));
end

% a. Get room boundaries and bin into 10cmx10cmx10cm voxels
figure(); hold on; title("Room Boundaries, All Human Movement and Rest"); plot3(human(:,1),human(:,2),human(:,3)); hold off;
room_bounds = [-290,290; -260,260; 1,230];
room_bounds_new_origin = [room_bounds(1,:)-room_bounds(1,1);room_bounds(2,:)-room_bounds(2,1);room_bounds(3,:)];
room_2d = zeros(round(room_bounds_new_origin(1:2,2)/bin_size)');

%% b. Smush all the flights together (take out the resting time) 

% Smushing only human approach bat time
human_flying_r_ = human; 
if B_ephys_data.TT_unit(unit).AlignedTimestamps(1) < 0
    ephys_flying_maximum = B_ephys_data.TT_unit(unit).AlignedTimestamps(end)-B_ephys_data.TT_unit(unit).AlignedTimestamps(1);
else
    ephys_flying_maximum = round(B_ephys_data.TT_unit(unit).AlignedTimestamps(end));
end
ephys_flying_r_ = zeros(1,ephys_flying_maximum);
for i=1:length(B_ephys_data.TT_unit(unit).AlignedTimestamps)
    if B_ephys_data.TT_unit(unit).AlignedTimestamps(i) > 0
        ephys_flying_r_(round(B_ephys_data.TT_unit(unit).AlignedTimestamps(i))) = 1;
    end
end

% Find all time that ciholas bat was chillin in a spot 
spots = [-2563,1366,1714;
         1920,-2005,1513];

bat_in_spot1_idxs = [];
for i=1:length(ciholas_r)
    if pdist2(ciholas_r(i,:),spots(1,:)) < 300
        bat_in_spot1_idxs = [bat_in_spot1_idxs,i];
    end
end
figure(); hold on; xlim([-2900 2900]); ylim([-2600 2600]); zlim([0 2300]); plot3(ciholas_r(bat_in_spot1_idxs,1),ciholas_r(bat_in_spot1_idxs,2),ciholas_r(bat_in_spot1_idxs,3));

% Extract the times in the human dataset where ciholasbat was chillin in a
% spot WILL THIS UNALIGN THINGS?? BE CAREFUL

%% Find the continuous stretches of time for faster compute
% FIx later, doesn't quite capture all the datpoints 
in_stretch = 0; stretch = []; stretches = {}; individuals = {};
for i=1:length(bat_in_spot1_idxs)-1
    if bat_in_spot1_idxs(i+1)-bat_in_spot1_idxs(i) == 1
        in_stretch = 1;
    else
        in_stretch = 0;
    end
    if in_stretch == 1 & ~isempty(stretch)
        stretch = [stretch,bat_in_spot1_idxs(i)];
    elseif in_stretch == 1 & isempty(stretch)
        stretch = [stretch, bat_in_spot1_idxs(i)];
    elseif in_stretch == 0 & ~isempty(stretch)
        stretches{end+1} = [stretch];
        stretch = [];
    elseif in_stretch == 0 & isempty(stretch)
        individuals{end+1} = bat_in_spot1_idxs(i);
        stretch = [];
    end
end

% Check if stretches add up
running_tally = 0;
for i=1:length(stretches)
    running_tally = running_tally+length(stretches{i});
end

% For each stretch, make the ephys!
ephys_flying_r = [];
for i=round(length(stretches)/3):length(stretches)-2
    start_ = stretches{i}(1);
    end_ = stretches{i}(end);
    ephys_f_start = start_/120*1e6;
    ephys_f_end = end_/120*1e6;
    
    % Make a vector tt that is the length of the seconds 1e6 in that flight
    tt{i} = [0:(ephys_f_end-ephys_f_start)];   
    temp_rr = zeros(length(tt{i}),1);
    temp_rr_length_check(i) = length(temp_rr);

    % Fill in the rest of the timestamps with ephys_f_start
    % subtracted for that ephys stretch
    [B,ephys_idxs_in_range] = find(ephys_f_start < B_ephys_data.TT_unit(unit).AlignedTimestamps & B_ephys_data.TT_unit(unit).AlignedTimestamps < ephys_f_end);
    if isempty(ephys_idxs_in_range)
        disp("This unit has no activity during this stretch");
        ephys_flying_r = [ephys_flying_r;temp_rr]; %ciholas_flight_struct{flight_num}.ephys{i} = 0;
        ciholas_ephys_on_human{i} = temp_rr;
    else
        disp(strcat("This unit has ",num2str(length(ephys_idxs_in_range))," spikes during stretch ",num2str(i)));
        for j=1:length(ephys_idxs_in_range)
            temp_ts = B_ephys_data.TT_unit(unit).AlignedTimestamps(ephys_idxs_in_range(j));
            temp_rr(round(temp_ts-ephys_f_start)) = 1;
        end
        ciholas_ephys_on_cortex{i} = temp_rr;
        ephys_flying_r = [ephys_flying_r;temp_rr];
    end 
end

bsp1 = [];
for i=round(length(stretches)/3):length(stretches)-2
    bsp1 = [bsp1,stretches{i}];
end

human_flying_r = human_flying_r_(bsp1,:,:);

% Now ephys_fly_r and human_flying_r should be vectors of the stretches of
% continuous stillness captured by stretches{} (second half)

% Check in on where the bat went during this time
figure(); hold on; plot3(ciholas_r(bsp1,1),ciholas_r(bsp1,2),ciholas_r(bsp1,3));
plot3(human_r(bsp1,1,3),human_r(bsp1,2,3),human_r(bsp1,3,3),'r');
plot3(human_r(bsp1,1,4),human_r(bsp1,2,4),human_r(bsp1,3,4),'b');

% c. Get time-spent in each voxel (occupancy map)
human_flying_r_rescale = [human_flying_r(:,1)-room_bounds(1,1)*10, human_flying_r(:,2)-room_bounds(2,1)*10];

% Add fake coordinates
human_flying_r_rescale = [human_flying_r_rescale;[0 0]; [room_bounds_new_origin(1,2)*10 room_bounds_new_origin(2,2)*10]];
figure('Name','Time M spent in each 20x20 voxel'); hist3(human_flying_r_rescale,'NBins',[size(room_2d,1),size(room_2d,2)]);
[occMap,Xedges,Yedges,binX,binY] = histcounts2(human_flying_r_rescale(:,1),human_flying_r_rescale(:,2),[size(room_2d,1),size(room_2d,2)]);
%figure('Name','Samples occupancy map'); imagesc(rot90(occMap));
occMap_ts = occMap/120;  figure('Name','TS occupancy map'); imagesc(rot90(occMap_ts));
occMap_ts_sm = imgaussfilt(occMap_ts);   %figure('Name','TS occupancy map, smoothed'); imagesc(rot90(occMap_ts_sm));
occMap_rollout = reshape(occMap_ts,[1,size(occMap,1)*size(occMap,2)]);

%% d. For every XY-bin, get the # of spikes in that bin (1xn vector of
% spikes where n is the cumulative length of occupied bins)
coord_pairs = [binX,binY]; coord_pairs_unique = unique(coord_pairs,'rows');
ephys_binCount = []; 
for j=1:length(coord_pairs_unique)
    if j == round(length(coord_pairs_unique)/4)
        disp("25% Finished");
    elseif j == round(length(coord_pairs_unique)/2)
        disp("50% Finished");
    elseif j == round(length(coord_pairs_unique)/4*3)
        disp("75% Finished");
    end
    temp_count = 0;
    for i=1:length(coord_pairs)-1
        if coord_pairs(i,:) == coord_pairs_unique(j,:)
            temp_count = temp_count + sum(ephys_flying_r((i-1)*floor(length(ephys_flying_r)/length(human_flying_r_rescale))+1:(i)*floor(length(ephys_flying_r)/length(human_flying_r_rescale))));
        end
    end
    ephys_binCount(j) = temp_count;
end
save(strcat(exp_data_path,'ephys/logger',num2str(logger),'/extracted_data/unit',num2str(unit),'_binCount_',human_name,'_traverse'),'ephys_binCount','coord_pairs','coord_pairs_unique','occMap','binX','binY','-v7.3')

%% 2. Set occupancy map bins to 0 if the bat spent less than 10ms in that bin
for i=1:length(occMap_rollout)
    if occMap_rollout(i) < 1
        occMap_rollout(i) = 0;
    end
end
occMap_ts_thresh = reshape(occMap_rollout,[size(occMap,1),size(occMap,2)]);
occMap_ts_thresh = occMap_ts;

% 3. Visualize the 2d ratemap
spike_map_raw = zeros(length(unique(binX)),length(unique(binY)));  
spike_map_raw = zeros(size(occMap_ts_thresh,1),size(occMap_ts_thresh,2));
ubinX = unique(binX);
ubinY = unique(binY);
for i=1:length(unique(binX))
    for j=1:length(unique(binY))
        for m=1:length(ephys_binCount)
            if coord_pairs_unique(m,1) == ubinX(i) & coord_pairs_unique(m,2) == ubinY(j)
                %spike_map_norm_sm(i,j) = ephys_binCount_norm_sm(m);
                %spike_map_norm(i,j) = ephys_binCount_norm(m);
                spike_map_raw(ubinX(i),ubinY(j)) = ephys_binCount(m);
            end
        end
    end
end

% a. Calculate the raw place map using the absolute number of spikes per bin divided by the occupancy in seconds in each bin
place_map_raw = spike_map_raw./occMap_ts_thresh;
figure('Name',strcat("Unit ",num2str(unit)," 2D ratemap raw ",human_name)); hold on; imagesc(place_map_raw'); axis off; title(strcat("Unit ",num2str(unit)," 2D ratemap raw")); hold off;

% b. Create gaussian kernel to smooth the raw spike map
sigma = 1.5; % Hafting I guess?
hsize = 5*round(sigma)+1;
gaussian_kernel = fspecial('gaussian',hsize,sigma);
%figure(); surf(gaussian_kernel); % If you want to see how your kernel looks like 
spike_map_smoothed = imfilter(spike_map_raw,gaussian_kernel);
occMap_ts_thresh_smoothed = imfilter(occMap_ts_thresh,gaussian_kernel);
place_map_smoothed = spike_map_smoothed./ occMap_ts_thresh_smoothed ;
figure('Name',strcat("Unit ",num2str(unit)," 2D ratemap smoothed with gaussian kernel")); hold on; imagesc((place_map_smoothed')); axis off; title(strcat("Unit ",num2str(unit)," 2D ratemap smoothed with gaussian kernel"))

% c. Account for nearest neighbor activations in a new place map
% From Michael's hippo code
idx_timespent_density = zeros(size(occMap,1),size(occMap,2)) + NaN ; % Initialize
for ii_y_bin = 2 : size(occMap,1)-1 %length(unique(binX)) - 1 , % Loop over x-bins
    for ii_x_bin = 2 : size(occMap,2)-1 %length(unique(binY)) - 1 , % Loop over y-bins
        matrix_3x3_of_neighbors = ...
            occMap_ts( ii_y_bin-1 : ii_y_bin+1, ii_x_bin-1 : ii_x_bin+1 ) ;
        sum_including_the_central_bin = sum(sum( matrix_3x3_of_neighbors)); % Count the matrix_3x3_of_neighbors + the central bin itself
        if ( sum_including_the_central_bin  > 0 ), % If the animal visited any of this bin's 8 neighbors (3x3 region)
            idx_timespent_density(ii_y_bin,ii_x_bin) = 1; % Put 1 in the central bin
        else  % If the animal did NOT visit any of this bin's 8 neighbors (3x3 region)
            idx_timespent_density(ii_y_bin,ii_x_bin) = 0; % Put 0 in the central bin (later we will divide by this 0 and will get NaN for the firing-rate map)
        end
    end
end

% Smooth the place map with NaNs
place_map_smoothed_with_NaN = (place_map_smoothed.* idx_timespent_density)./idx_timespent_density;
occMap_ts_thresh_smoothed_with_NaN = (occMap_ts_thresh_smoothed.* idx_timespent_density)./idx_timespent_density;

idx_notNaN_PlaceField = find( ~isnan( place_map_smoothed_with_NaN ) ); % Find the indexes of non-NaN bins
idx_isNaN_PlaceField = find( isnan( place_map_smoothed_with_NaN  ) ); % Find the indexes of NaN bins

idx_notNaN_PlaceField_un_smoothed_rate_map = find( ~isnan( place_map_raw ) ); % Find the indexes of non-NaN bins
figure('Name',strcat("Unit ",num2str(unit)," 2D ratemap")); hold on; imagesc(place_map_smoothed_with_NaN'); axis off; title(strcat("Unit ",num2str(unit)," 2D ratemap smooth with NaN")); hold off;

%% 4. Calculate INFORMATION PER SPIKE  (computed for the SMOOTHED field): -----
% Information_per_spike = sum( p_i * ( r_i / r ) * log2( r_i / r ) )
%    Where:
%       r_i = firing rate in bin i ;
%       p_i = occupancy of bin i = time-spent by bat in bin i / total time spent in all bins ;
%       r = mean( r_i ) = overall mean firing rate (mean over all the pixels)
% See: Skaggs WE, McNaughton BL, Wilson MA, Barnes CA, Hippocampus 6(2), 149-172 (1996).

r_i = place_map_smoothed_with_NaN( idx_notNaN_PlaceField ); % Use the SMOOTHED Place Field
p_i = occMap_ts_thresh_smoothed_with_NaN( idx_notNaN_PlaceField ) ./ ...
    sum( occMap_ts_thresh_smoothed_with_NaN( idx_notNaN_PlaceField ) ) ;
r_i = r_i(:) ; p_i = p_i(:) ; % Turn r_i and p_i into Column vectors
% % %             r = mean( r_i ) ;
r = sum( r_i .* p_i );
information_per_spike = sum( p_i .* ( r_i / r ) .* log2( ( r_i + eps ) / r ) ) ; % I added a tiny number to avoid log(0)

% Save figure of the heatmap 
f = figure('Name',strcat("Unit ",num2str(unit)," 2D ratemap for ", human_name," position")); hold on; colorbar; imagesc(place_map_smoothed_with_NaN'); axis off; title(strcat("Unit ",num2str(unit)," 2D ratemap smooth with NaN for ",human_name," position")); hold off;

%% 5. Check if the shuffles already exist for that cell
% If they exist, run a t test to assess significance of that unit's SI
if exist(strcat(exp_data_path,'ephys/logger',num2str(logger),'/extracted_data/unit_',num2str(unit),'_shuffles_',human_name,'/shuffle_SI_',human_name,'.mat'))
    shuffles = load(strcat(exp_data_path,'ephys/logger',num2str(logger),'/extracted_data/unit_',num2str(unit),'_shuffles_',human_name,'/shuffle_SI_',human_name.mat'));
    [h,p] = ttest2(information_per_spike,shuffles.information_per_spike_shuff);
    SI_info.h = h;
    SI_info.p = p;
    if h==1 & information_per_spike < mean(shuffles.information_per_spike_shuff) 
        SI_info.mean_shuffle_information_per_spike = mean(shuffles.information_per_spike_shuff);
        SI_info.SI_category = 'SI < shuffle SI';
        disp("Unit has less spatial information than the mean of the shuffles.");
        figure();  hold on; title(strcat("Spatial information of shuffles and Unit ",num2str(unit)," (red dot)")); boxplot(shuffles.information_per_spike_shuff); scatter(1,information_per_spike,'r','filled'); ylim([0 max(shuffles.information_per_spike_shuff)+information_per_spike-max(shuffles.information_per_spike_shuff)+0.1]);
    elseif h==1 & mean(shuffles.information_per_spike_shuff) < information_per_spike
        SI_info.SI_category = 'Spatially Tuned. SI > shuffle SI';
        SI_info.mean_shuffle_information_per_spike = mean(shuffles.information_per_spike_shuff);
        disp("This Unit has significant spatial information.");
        disp(strcat("SI of unit ",num2str(unit),":",num2str(information_per_spike)));
        figure();  hold on; title(strcat("Spatial information of shuffles and Unit ",num2str(unit)," (red dot)")); boxplot(shuffles.information_per_spike_shuff); scatter(1,information_per_spike,'r','filled'); ylim([0 max(shuffles.information_per_spike_shuff)+information_per_spike-max(shuffles.information_per_spike_shuff)+0.1]);
    else
       SI_info.mean_shuffle_information_per_spike = mean(shuffles.information_per_spike_shuff);
       SI_info.SI_category = 'None';
       disp("Not spatially tuned unit.");
       figure();  hold on; title(strcat("Spatial information of shuffles and Unit ",num2str(unit)," (red dot)")); boxplot(shuffles.information_per_spike_shuff); scatter(1,information_per_spike,'r','filled'); ylim([0 max(shuffles.information_per_spike_shuff)+information_per_spike-max(shuffles.information_per_spike_shuff)+0.1]);
    end
else
    disp("Running shuffling");

    num_shuffles=500;

    % Clock rotation shuffle
    % Generate all the shuffle moves:
    shuffle_clock_times = round(rand(num_shuffles,1),5);
    shuffle_clock_times = unique(shuffle_clock_times);
    for lb = 1:length(shuffle_clock_times)
        disp(strcat("Shuffle #",num2str(lb)));
        % Pick clock direction
        cs_amount = length(ephys_flying_r)*shuffle_clock_times(lb);
        round(cs_amount);
        ephys_flying_r_shift = circshift(ephys_flying_r,round(cs_amount));
        ephys_binCount_shuff = []; 
        for j=1:length(coord_pairs_unique)
            if j == round(length(coord_pairs_unique)/4)
                disp("25% Finished");
            elseif j == round(length(coord_pairs_unique)/2)
                disp("50% Finished");
            elseif j == round(length(coord_pairs_unique)/4*3)
                disp("75% Finished");
            end
            temp_count = 0;
            for i=1:length(coord_pairs)-3
                if coord_pairs(i,:) == coord_pairs_unique(j,:)
                    temp_count = temp_count + sum(ephys_flying_r_shift((i-1)*round(length(ephys_flying_r_shift)/length(human_flying_r_rescale))+1:(i)*round(length(ephys_flying_r_shift)/length(human_flying_r_rescale))));
                end
            end
            ephys_binCount_shuff(j) = temp_count;
        end
    
        %% Set occupancy map bins to 0 if the bat spent less than 10ms in that bin
        for i=1:length(occMap_rollout)
            if occMap_rollout(i) < 0.2
                occMap_rollout(i) = 0;
            end
        end

        %occMap_ts_thresh = reshape(occMap_rollout,[size(occMap,1),size(occMap,2)]);
        occMap_ts_thresh = occMap_ts;

        % Visualize the 2d ratemap
        spike_map_raw = zeros(length(unique(binX)),length(unique(binY)));  
        spike_map_raw = zeros(size(occMap_ts_thresh,1),size(occMap_ts_thresh,2));
        ubinX = unique(binX);
        ubinY = unique(binY);
        for i=1:length(unique(binX))
            for j=1:length(unique(binY))
                for m=1:length(ephys_binCount_shuff)
                    if coord_pairs_unique(m,1) == ubinX(i) & coord_pairs_unique(m,2) == ubinY(j)
                        spike_map_raw(ubinX(i),ubinY(j)) = ephys_binCount_shuff(m);
                    end
                end
            end
        end
        
        % Calculate the raw place map using the absolute number of spikes per bin divided by
        % the occupancy in seconds in each bin
        clear place_map_raw;
        place_map_raw = spike_map_raw./occMap_ts_thresh;
        
        % Create gaussian kernel: 
        sigma = 1.5; % Hafting I guess?
        hsize = 5*round(sigma)+1;
        gaussian_kernel = fspecial('gaussian',hsize,sigma);
        
        % Smoothing = convolve with gaussian kernel: 
        spike_map_smoothed = imfilter(spike_map_raw,gaussian_kernel);
        occMap_ts_thresh_smoothed = imfilter(occMap_ts_thresh,gaussian_kernel);
        place_map_smoothed = spike_map_smoothed./ occMap_ts_thresh_smoothed ;
        
        % Account for nearest neighbor activations in a new place map
        idx_timespent_density = zeros(size(occMap,1),size(occMap,2)) + NaN ; % Initialize
        for ii_y_bin = 2 : length(unique(binX)) - 1 , % Loop over x-bins
            for ii_x_bin = 2 : length(unique(binY)) - 1 , % Loop over y-bins
                matrix_3x3_of_neighbors = ...
                    occMap_ts( ii_y_bin-1 : ii_y_bin+1, ii_x_bin-1 : ii_x_bin+1 ) ;
                sum_including_the_central_bin = sum(sum( matrix_3x3_of_neighbors)); % Count the matrix_3x3_of_neighbors + the central bin itself
                if ( sum_including_the_central_bin  > 0 ), % If the animal visited any of this bin's 8 neighbors (3x3 region)
                    idx_timespent_density(ii_y_bin,ii_x_bin) = 1; % Put 1 in the central bin
                else  % If the animal did NOT visit any of this bin's 8 neighbors (3x3 region)
                    idx_timespent_density(ii_y_bin,ii_x_bin) = 0; % Put 0 in the central bin (later we will divide by this 0 and will get NaN for the firing-rate map)
                end
            end
        end
        
        clear place_map_smoothed_with_NaN occMap_ts_thresh_smoothed_with_NaN
        place_map_smoothed_with_NaN = (place_map_smoothed.* idx_timespent_density)./idx_timespent_density;
        occMap_ts_thresh_smoothed_with_NaN = (occMap_ts_thresh_smoothed.* idx_timespent_density)./idx_timespent_density;
        
        idx_notNaN_PlaceField = find( ~isnan( place_map_smoothed_with_NaN ) ); % Find the indexes of non-NaN bins
        idx_isNaN_PlaceField = find( isnan( place_map_smoothed_with_NaN  ) ); % Find the indexes of NaN bins
        
        idx_notNaN_PlaceField_un_smoothed_rate_map = find( ~isnan( place_map_raw ) ); % Find the indexes of non-NaN bins

        % Compute SI for this shuffle
        clear r_i p_i r
        r_i = place_map_smoothed_with_NaN( idx_notNaN_PlaceField ); % Use the SMOOTHED Place Field
        p_i = occMap_ts_thresh_smoothed_with_NaN( idx_notNaN_PlaceField ) ./ ...
            sum( occMap_ts_thresh_smoothed_with_NaN( idx_notNaN_PlaceField ) ) ;
        r_i = r_i(:) ; p_i = p_i(:) ; % Turn r_i and p_i into Column vectors
        % % %             r = mean( r_i ) ;
        r = sum( r_i .* p_i );
        information_per_spike_shuff(lb) = sum( p_i .* ( r_i / r ) .* log2( ( r_i + eps ) / r ) ) ; % I added a tiny number to avoid log(0)
    
        f = figure('Name',strcat("Unit ",num2str(unit)," 2D ratemap shuffle ",num2str(lb)," I: ",num2str(information_per_spike_shuff(lb))),'visible','off'); hold on; imagesc(place_map_smoothed_with_NaN'); title(strcat("Unit ",num2str(unit)," 2D ratemap shuffle OB ",num2str(lb)," I: ",num2str(information_per_spike_shuff(lb)))); hold off;
        if ~exist(strcat(exp_data_path,"ephys/logger13/extracted_data/unit_",num2str(unit),"_shuffles_",human_name))
            mkdir(strcat(exp_data_path,"ephys/logger13/extracted_data/unit_",num2str(unit),"_shuffles_",human_name));
            saveas(f,strcat(exp_data_path,'ephys/logger13/extracted_data/unit_',num2str(unit),'_shuffles_',human_name,'/',num2str(batdate),'_14650_PlaceMap_shuffle_',human_name,'_',num2str(lb)),'jpg');
        else
            saveas(f,strcat(exp_data_path,'ephys/logger13/extracted_data/unit_',num2str(unit),'_shuffles_',human_name,'/',num2str(batdate),'_14650_PlaceMap_shuffle_',human_name,'_',num2str(lb)),'jpg');
        end
    end
    save(strcat(exp_data_path,'ephys/logger13/extracted_data/unit_',num2str(unit),'_shuffles_OB/shuffle_SI_',human_name,'.mat'),'information_per_spike_shuff','-v7.3')
    
    disp("Now doing sig test with new shuffled data!");
    shuffles = load(strcat(exp_data_path,'ephys/logger',num2str(logger),'/extracted_data/unit_',num2str(unit),'_shuffles_,'human_name,'/shuffle_SI_',human_name,'.mat'));
    [h,p] = ttest2(information_per_spike,shuffles.information_per_spike_shuff);
    if h==1 & information_per_spike < mean(shuffles.information_per_spike_shuff) 
        SI_info.mean_shuffle_information_per_spike = mean(shuffles.information_per_spike_shuff);
        SI_info.SI_category = 'SI < shuffle SI';
        disp("Unit has less spatial information than the mean of the shuffles.");
        figure();  hold on; title(strcat("Spatial information of shuffles and Unit ",num2str(unit)," (red dot)")); boxplot(shuffles.information_per_spike_shuff); scatter(1,information_per_spike,'r','filled'); ylim([0 max(shuffles.information_per_spike_shuff)+information_per_spike-max(shuffles.information_per_spike_shuff)+0.1]);
    elseif h==1 & mean(shuffles.information_per_spike_shuff) < information_per_spike
        SI_info.SI_category = 'Spatially Tuned. SI > shuffle SI';
        SI_info.mean_shuffle_information_per_spike = mean(shuffles.information_per_spike_shuff);
        disp("This Unit has significant spatial information.");
        disp(strcat("SI of unit ",num2str(unit),":",num2str(information_per_spike)));
        figure();  hold on; title(strcat("Spatial information of shuffles and Unit ",num2str(unit)," (red dot)")); boxplot(shuffles.information_per_spike_shuff); scatter(1,information_per_spike,'r','filled'); ylim([0 max(shuffles.information_per_spike_shuff)+information_per_spike-max(shuffles.information_per_spike_shuff)+0.1]);
    else
       SI_info.mean_shuffle_information_per_spike = mean(shuffles.information_per_spike_shuff);
       SI_info.SI_category = 'None';
       disp("Not spatially tuned unit.");
       figure();  hold on; title(strcat("Spatial information of shuffles and Unit ",num2str(unit)," (red dot)")); boxplot(shuffles.information_per_spike_shuff); scatter(1,information_per_spike,'r','filled'); ylim([0 max(shuffles.information_per_spike_shuff)+information_per_spike-max(shuffles.information_per_spike_shuff)+0.1]);
    end
end

end