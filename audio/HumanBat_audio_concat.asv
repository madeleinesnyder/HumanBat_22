function [] = HumanBat_audio_concat(filePath)
    
    % Run in the directory of audiofiles. Will concatenate the audio of an
    % uninterrupted TTL into a large file for later processing/echolcoation
    % extraction and alignment with flight data. 
    % 
    % Parameter: filePath: path to directory containing .mat audio files.
    
    fileNameStruct = dir(fullfile(filePath, '*_audio_trial_*.mat'));
    fname = fileNameStruct(1).name;
    matches = regexp(fname, '_(.*)_audio_trial_.*.mat', 'tokens');
    
    Date = matches{1}{1};
    fname_base = sprintf('_%s_audio_trial_',date);
    filePath = [filePath filesep];

    plotFlag = 0;
    lastFileNum = length(dir([filePath '*_' Date '_audio_trial_*']));
    if plotFlag == 1
        figure();
    end
    
    % Each audiofile is approximatly 12 seconds of data.
    
    
    % Detect starting file that actually has TTL
    for i=1:lastFileNum]
        ttemp_file = dir([filePath '*_' Date '_audio_trial_' num2str(i) '.mat']);
        temp_file = load(ttemp_file.name);
        disp(strcat("Checking if file"," ",num2str(i)," ","contains the first TTL"))
        if max(temp_file.recbuf(:,end)) < 0.1
            continue
        else
            firstFileIdx = i;
            disp(strcat("File"," ",num2str(firstFileIdx)," ","contains first TTL."));
            break
        end
    end
    
    ttlProcessFlag=0;
    for mic_i = 1:4
        if mic_i == 1
            ttlProcessFlag = 1;
            disp(strcat("Concatening TTLs"));
        end
        disp(strcat("Concatening audio for Mic "," ",num2str(mic_i)));
        clear audioConCat; clear ttlConCat;
        fileFirst = load([filePath '*_' Date '_audio_trial_' num2str(firstFileIdx)]);
        ttlConCat = fileFirst.recbuf(:,end);
        audioConCat = fileFirst.recbuf(:,mic_i);
        TTL_break_counter = 0;
        noTTLfiles = [];
        for file_i = firstFileIdx:lastFileNum-1
            
            if mod(file_i,10) == 0
                disp(strcat("File"," ",num2str(file_i)));
            end
            %load the current and next files
            if file_i == firstFileIdx
                fileCur = fileFirst;
            else
                fileCur = fileNext;
            end
            fileNext = load([filePath '*_' Date '_audio_trial_' num2str(file_i+1) '.mat']);
    
            % Check if file contains TTLs 
            if max(fileCur.recbuf(:,end)) < 0.1
                % If no ttls, log that this file doesn't contain any and skip
                % to the next ttl. Chunk the audiofile here.
                disp(strcat("File"," ",num2str(file_i)," ","contains no TTLs"));
                 
                % Chunk the audio concatination here and start another file. 
                try
                    % confirm the ttl are lined up correctly every 3 seconds
                    %[R,LTall,UT,LL,UL] = risetime(ttlConCat,fs);
                    %figure();
                    %plot(LTall,1:length(LTall));
                    %title('TTL pulses every 3 seconds');
                    % plot the mic trace concatenated based off ttl pulses
                    %[R,LTmic1,UT,LL,UL] = risetime(audioConCat);
                    %LTmic1 = LTmic1/fs;
                    %[b,a] = butter(3,5000/(fs/2),'high');
                    %audioFilt = filtfilt(b,a,audioConCat);
                    % Plot the concatentated TTLs up to that point
                    %figure(); plot(ttlConCat);
                    % Save this chunk and clear audioConcat and ttlConCat
                    save(strcat('audioConCat_mic_',num2str(mic_i),'_segment_',num2str(TTL_break_counter)),'audioConCat','-v7.3');
                    if ttlProcessFlag==1
                        save(strcat('ttlConCat_segment_',num2str(TTL_break_counter)),'ttlConCat','-v7.3');
                    end
                    %clear audioConCat ttlConCat audioConCat_segment ttlConCat_segment;
                    TTL_break_counter = TTL_break_counter+1;
    
                    % Re-initialize matrixes
                    fileFirst = [];
                    ttlConCat = [];
                    audioConCat = [];
                catch
                    continue
                end
        
                % Add this file to the number of files that don't have TTLs
                noTTLfiles = [noTTLfiles,file_i];
                continue
    
            elseif max(fileNext.recbuf(:,end)) < 0.1
                % If no ttls, log that this file doesn't contain any and skip
                % to the next ttl. Chunk the audiofile here.
                disp(strcat("File"," ",num2str(file_i+1)," ","contains no TTLs"));
                 
                % Chunk the audio concatination here and start another file. 
                try
                    % confirm the ttl are lined up correctly every 3 seconds
                    %[R,LTall,UT,LL,UL] = risetime(ttlConCat,fs);
                    %figure();
                    %plot(LTall,1:length(LTall));
                    %title('TTL pulses every 3 seconds');
                    % plot the mic trace concatenated based off ttl pulses
                    %[R,LTmic1,UT,LL,UL] = risetime(audioConCat);
                    %LTmic1 = LTmic1/fs;
                    %[b,a] = butter(3,5000/(fs/2),'high');
                    %audioFilt = filtfilt(b,a,audioConCat);
                    % Plot the concatentated TTLs up to that point
                    %figure(); plot(ttlConCat);
                    % Save this chunk and clear audioConcat and ttlConCat
                    save(strcat('audioConCat_mic_',num2str(mic_i),'_segment_',num2str(TTL_break_counter)),'audioConCat','-v7.3');
                    if ttlProcessFlag==1
                        save(strcat('ttlConCat_segment_',num2str(TTL_break_counter)),'ttlConCat','-v7.3');
                    end
                    %clear audioConCat ttlConCat audioConCat_segment ttlConCat_segment;
                    TTL_break_counter = TTL_break_counter+1;
    
                    % Re-initialize matrixes
                    fileFirst = [];
                    ttlConCat = [];
                    audioConCat = [];
                catch
                    continue
                end
        
                % Add this file to the number of files that don't have TTLs
                noTTLfiles = [noTTLfiles,file_i];
                continue   
            else        
                fs=fileCur.fs;
                event_ttls_cur = fileCur.recbuf(:,end); %trial data for current file
                audioMicCur = fileCur.recbuf(:,mic_i);
                [R,LTcur,UT,LL,UL] = risetime(event_ttls_cur,fs); %find times of ttl pulses in SECONDS
                
                event_ttls_next = fileNext.recbuf(:,end); %trial data for next file
                audioMicNext = fileNext.recbuf(:,mic_i);
                [R,LTnext,UT,LL,UL] = risetime(event_ttls_next,fs); %find times of ttl pulses in SECONDS
                
                extra_end = (length(event_ttls_cur)- (LTcur(end)*fs));
                extra_start1 = LTnext(1)*fs;
                try
                    extra_start2 = LTnext(2)*fs;
                catch
                    break %when you reach the last file, if the file contains less than 2 ttl, it can break and will not get confused
                end
                %calculate the amount that needs to be cut off from the next file
                %depending on whether it spans more or less than 3 seconds
                if extra_end + extra_start1 >= 3*fs
                    cutOut = round(extra_end+extra_start1-(3*fs));
                elseif extra_end + extra_start1 < 3*fs
                    cutOut = round(extra_end+extra_start2-(3*fs));
                end
                
                if size(LTnext) > 8
                    continue;
                else
                    %concatenate the ttl and audio streams
                    try
                        ttlConCat = vertcat(ttlConCat,event_ttls_next(cutOut+1:end));
                        audioConCat = vertcat(audioConCat,audioMicNext(cutOut+1:end));
                    catch
                        disp("something wrong with concatenating ttls or audio stream");
                        continue;
                    end
                end
        
                if plotFlag == 1
                %plot current file ttls
                subplot(4,1,1);
                plot(event_ttls_cur);
                hold on
                for i = 1:length(LTcur)
                    plot(LTcur(i)*fs,0,'o')
                end
                title(['File num ' num2str(file_i)]);
                %plot next file ttls
                subplot(4,1,2);
                plot(event_ttls_next);
                hold on
                for i = 1:length(LTnext)
                    plot(LTnext(i)*fs,0,'o');
                end
                title(['File num ' num2str(file_i+1)]);
                %plot the next file with the 'proper time' cut out
                subplot(4,1,3);
                plot(event_ttls_next(cutOut+1:end))
                title(['Cut version of file num ' num2str(file_i+1)]);
                %plot the fully concatenated version
                subplot(4,1,4);
                plot(ttlConCat);
                title('All files connected');
                drawnow
                
                pause
                clf
                end
            end
        end
        
        %confirm the ttl are lined up correctly every 3 seconds
        if ~isempty(audioConCat)
            [R,LTall,UT,LL,UL] = risetime(ttlConCat,fs);
            figure();
            plot(LTall,1:length(LTall),'*');
            title('TTL pulses every 3 seconds');
            %plot the mic trace concatenated based off ttl pulses
            [R,LTmic1,UT,LL,UL] = risetime(audioConCat);
            LTmic1 = LTmic1/fs;
            [b,a] = butter(3,5000/(fs/2),'high');
            %audioFilt = filtfilt(b,a,audioConCat);
        %     figure();
        %     plot(1:length(audioFilt),audioFilt);
        %     title(['Mic ' num2str(mic_i) ' Filered']);
        %     figure();
        %     plot(1:length(audioConCat),audioConCat);
        %     title(['Mic ' num2str(mic_i) ' raw']);
        %     drawnow
            % hold on;
            % for i = 1:length(LTmic1)
            %     plot(LTmic1(i)*fs,0,'o')
            % end
            %play concatenated sound
            micObj = audioplayer(audioConCat,fs);
            play(micObj);
            %pause
            save(strcat('audioConCat_',num2str(mic_i)),'audioConCat','-v7.3');
            if ttlProcessFlag==1
                save('ttlConCat','ttlConCat','-v7.3');
            end
        else
            disp("End")
        end
    end
    
    % Decimate audio data
    
    % Pass the concatenated data to 
    % [out, metrics] = ImBat_MCS_alignTimeStamps(audio,video,TS,Markers,mic_data)
    % Audio data should be same length as mic data?
end




